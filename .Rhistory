library(readr)
food <- read_csv("food.csv")
View(food)
View(food)
View(food)
food$Region<-as.factor(food$Region)
str(food)
food<-as.factor(food$State)
food<-as.factor(food$State)
str(food)
food$State<-as.factor(food$State)
str(food)
colnames(food)[7] <- desert
colnames(food)[7] <- c("desert")
colnames(food)[7] <- c("Desert")
summary(lm(Desert ~.-CensusTract-State,data = food))
factor(food$Desert) <- c("no","yes")
set_labels(food$Desert, labels = c('0' = "No", '1' ="Yes"))
labels(food, which= Desert, labels = c('0' = "No", '1' ="Yes"))
colnames(food)[7] <- c("Desert")
View(food.access)
install.packages("sjPlot")
set_lables(food, Desert, labels= c(0 ="No", 1="Yes"))
set_lables(food, Desert, labels <- c(0 ="No", 1="Yes"))
set_lables(food, Desert, labels <- c(0 =="No", 1=="Yes"))
ggboxplot(my_data, x = "Urban", y = "Desert",
color = "POP2010", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "POP2010", xlab = "Urban")
library("ggpubr")
ggboxplot(my_data, x = "Urban", y = "Desert",
color = "POP2010", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "POP2010", xlab = "Urban")
library("ggpubr")
ggboxplot(food, x = "Urban", y = "Desert",
color = "POP2010", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "POP2010", xlab = "Urban")
View(food)
View(food.access)
View(USDA_Food_Access_Regions)
library(readr)
Food_Access_State_And_Region <- read_csv("Food_Access_State_And_Region.csv")
View(Food_Access_State_And_Region)
library(readr)
food <- read_csv("food.csv")
View(food)
View(food)
View(Food_Access_State_And_Region)
View(food.access)
View(USDA_Food_Access_Regions)
View(food.access)
View(Food_Access_State_And_Region)
View(food)
dim(food)
str(food)
food$State<-as.factor(food$State)
dim(food)
str(food)
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[7] <- c("Desert")
olnames(food)[7] <- c("Desert")
str(food)
colnames(food)[8] <- c("Desert")
str(food)
library(readr)
food <- read_csv("food.csv")
View(food)
colnames(food)[8] <- c("Desert")
str(food)
food$Region <- as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
Region
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
food$Region
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Make region a factor
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
food$Region
str(food)
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Make region a factor
as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
food$Region
str(food)
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Make region a factor
food$Region <- as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
str(food)
as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
str(food)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West")
str(food)
food$Region <- as.factor(food$Region)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West")
str(food)
food$Region <- as.factor(food$Region)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia")
str(food)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia"), labesl= c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia") & labesl= c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia") & labesl <- c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia") & labels(food$Region) = c("NE", "SE", "MW", "SW","W","DC"))
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia")
labels(food$Region) = c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia")
names(food$Region) = c("NE", "SE", "MW", "SW","W","DC")
str(food)
levels(Region)
levels("Region")
levels(food$Region)
levels(food$Region)
food$Region <- as.factor(food$Region)
levels(food$Region)
levels(food$Region) <-c("NE", "SE","MW","SW","W","DC")
food$Region
View(food)
library(readr)
food <- read_csv("food.csv")
View(food)
class(food$Region)
class(food$Region)
food$Region <- as.factor(food$Region)
levels(food$Region)
colnames(food)[7] <- c("Desert")
# Make region a factor
class(food$Region)
food$Region <- as.factor(food$Region)
str(food)
View(food)
View(food)
library(readr)
food <- read_csv("food.csv")
View(food)
colnames(food)[8] <- c("Desert")
# Make Regions a factor
food$Region <- as.factor(food$Region)
str(food)
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(LILATracts_1And10~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
summary(glm_1sttry)
my_data <- food
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
food$Region <- as.factor(food$Region)
str(food)
### sampling process removed, new "food.csv" has been uploaded
### Model Building
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry
summary(glm_1sttry)
summary(glm_1sttry)
chisq.test(food$Urban,y=food$Desert)
chisq.test(food$Region, y=food$Desert)
chisq.test(food$State, y=food$Desert)
food$State <- as.factor(food$State)
str(food)
food$Urban<- as.factor(food$Urban)
str(food)
levels(food$Urban)
cor.test(food$Urban, food$Desert)
cor.test(food$POP2010, food$Desert)
cor.test(food$POP2010, food$Desert)
cor.test(food$CensusTract, food$Desert)
cor.test(food$PovertyRate, food$Desert)
cor.test(food$TractSNAP, food$Desert)
cor.test(food$TractBlack, food$Desert)
install.packages("chloroplether")
install.packages("choroplethrMaps")
library(choroplethrMaps)
library("chloroplethr")
library(choroplethr)
library(choroplethrMaps)
?df_pop_state
??df_pop_state’
?df_pop_state’
??df_pop_state
library(ggplot2)
library(ggplot2movies)
library(ggpubr)
install.packages("mapproj")
library(maps)
library(maptools)
library(mapproj)
library(ggmap)
??ggmap
library(sp)
library(ggmap)
sp::webmap
data(df_pop_state)
state_choropleth(df_pop_state)
?df_state_demographics
??df_state_demographics
library(tigris)
library(acs)
library(stringr)
library(maptools)
ggtract<-fortify(tract, region = "GEOID")
library(broom)
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
install.packages('devtools')
library('devtools')
install.packages('choroplethrZip')
library('choroplethrZip')
install_github('arilamstein/choroplethrZip@v1.5.0')
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
install_github('arilamstein/choroplethrZip@v1.5.0')
library(choroplethrZip)
?county_choropleth_acs
??county_choropleth_acs
install.packages(‘choroplethr’)
install.packages("choroplethr")
update.packages("choroplethr")
> update.packages("choroplethr")
update.packages("choroplethr")
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
??api.key.install
install.packages("acs.fetch")
update.packages("acs.fetch")
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
library(acs)
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
library(rstudioapi)
??api.key.install
api.key.install(c2f6912e10d0446fa56f2ea12e9fdc8c6d187327, file ="census.key")
> api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
census.key <- api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
census.key
acs.fetch(endyear=2010, geography=food$CensusTract)
?get_state_demographics
??get_state_demographics
ggtract <- fortify(CensusTract, region = "GEOID")
ggtract <- fortify(food$CensusTract, region = "GEOID")
ggtract <- fortify(food, region = "CensusTract")
remove(ggtract)
library(tigris)
library(acs)
library(stringr)
library(tidyverse)
library(ggmap)
library(DT)
library(knitr)
geo <- geocode(location = food$CensusTract, output="GEOID", source="census")
geo <- geocode(location = food$CensusTract, output="latlon", source="census")
geo <- geocode(location = food$CensusTract, output="GEOID", source="google")
geo <- geocode(location = food$CensusTract, output="latlon", source="google")
?register_google
register_google(census.key)
register_google(c2f6912e10d0446fa56f2ea12e9fdc8c6d187327)
register_google(key=c2f6912e10d0446fa56f2ea12e9fdc8c6d187327)
register_google(key=AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA)
register_google(key = AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA)
key = AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA
> register_google(key = "AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA")
register_google(key = "AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA")
geo <- geocode(location = food$CensusTract, output="latlon", source="google")
install.packages("devtools")
devtools::install_github("hrecht/censusapi")
library("censusapi")
install.packages("devtools")
source(c2f6912e10d0446fa56f2ea12e9fdc8c6d187327)
source("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
food.deserts <- ggplot() + geom_polygon(data=food y, aes(x=food$CensusTract, y=food$Desert)
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert)
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert)
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert)
geom_polygon(data=food, aes
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert))
food.deserts
View(food.deserts)
View(food.deserts)
View(food.deserts)
remvoe(food.deserts)
remove(food.deserts)
remove(census.keyu)
remove(census.key)
geo <- geocode(location = food$State, output="latlon", source="google")
drat::addRepo('bhaskarvk')
install.packages('drat')
install.packages('usgazetteer')
update.packages('usgazetteer')
library(censusapi)
library(censusapi)
apis <- listCensusApis()
apis <- listCensusApis()
View(apis)
remove(apis)
View(glm_1sttry)
cor.test(food$TractSNAP, food$Desert)
leaps :: regsubsets()
car :: subsets()
leaps::regsubsets()
car::subsets()
library(leaps)
library(car)
leaps::regsubsets()
car::subsets()
update.packages(repos='http://cran.rstudio.com/', ask=FALSE, checkBuilt=TRUE)
dim(food)
str(food)
food$State<-as.factor(food$State)
food <- data.frame(read.csv("food.csv"))
dim(food)
str(food)
food$State<-as.factor(food$State)
View(food)
View(food)
colnames(food)[8] <- c("Desert")
reg.best10 <- regsubset(Desert~., data= food, nvmax=10, nbest=1, method="forward")
install.packages("leaps")
reg.best10 <- regsubset(Desert~., data= food, nvmax=10, nbest=1, method="forward")
install.packages("leaps")
reg.best10 <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forward")
library(leaps)
reg.best10 <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forward")
View(reg.best10)
install.packages("ISLR")
install.packages("leaps")
reg.best10 <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forward")
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
install.packages("leaps")
reg.best10.forward <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "aic", main = "AIC")
plot(reg.best10.forward, scale = "bic", main = "BIC")
# Backward Selection
reg.best10.bkwd <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="backward")
plot(reg.best10.bkwd, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.bkwd, scale = "bic", main = "BIC")
plot(reg.best10.bkwd, scale = "aic", main = "AIC")
# Sequential Selection
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
# Deciding Best Variaables
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "aic", main = "AIC")
plot(reg.best10.forward, scale = "bic", main = "BIC")
# Backward Selection
reg.best10.bkwd <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="backward")
plot(reg.best10.bkwd, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.bkwd, scale = "bic", main = "BIC")
plot(reg.best10.bkwd, scale = "aic", main = "AIC")
# Sequential Selection
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
#Correlation Tests on x variables and y
cor.test(food$POP2010, food$Desert)
cor.test(food$TractBlack, food$Desert)
cor.test(food$PovertyRate, food$Desert)
cor.test(food$TractSNAP, food$Desert)
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
library(leaps)
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
reg.best10.forward <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("leaps")
# Deciding Best Variaables
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~(POP2010, PovertyRate, MedainFamilyIncome, TractSNAP) data= food, nvmax=10, nbest=1, method="forwad"))
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~(POP2010+PovertyRate+MedainFamilyIncome+TractSNAP) data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
library(leaps)
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("leaps")
library(leaps)
reg.best10.forward <- regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
loadPkg("kableExtra")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
str(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
str(food)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
str(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
str(food)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
loadPkg("xtable")
loadPkg("kableExtra")
