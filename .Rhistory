plot(reg.best10.seq, scale = "bic", main = "BIC")
#Correlation Tests on x variables and y
cor.test(food$POP2010, food$Desert)
cor.test(food$TractBlack, food$Desert)
cor.test(food$PovertyRate, food$Desert)
cor.test(food$TractSNAP, food$Desert)
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
library(leaps)
reg.best10.seq <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "aic", main = "AIC")
plot(reg.best10.seq, scale = "bic", main = "BIC")
reg.best10.forward <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~., data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("leaps")
# Deciding Best Variaables
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~(POP2010, PovertyRate, MedainFamilyIncome, TractSNAP) data= food, nvmax=10, nbest=1, method="forwad"))
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~(POP2010+PovertyRate+MedainFamilyIncome+TractSNAP) data= food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
library(leaps)
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("ISLR")
install.packages("leaps")
# Forward Selection
reg.best10.forward <- regsubsets(Desert~-CenusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
install.packages("leaps")
library(leaps)
reg.best10.forward <- regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
plot(reg.best10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.forward, scale = "cp", main = "Cp")
plot(reg.best10.forward, scale = "bic", main = "BIC")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
loadPkg("kableExtra")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
str(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
str(food)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
str(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
str(food)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
loadPkg("xtable")
loadPkg("kableExtra")
View(food)
summary(food$Desert)
veiw(food$Desert)
summary(lm(LILATracts_1And10~.-CensusTract-State,data = food))
glm_1sttry<-glm(LILATracts_1And10~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
library(leaps)
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
loadPkg("kableExtra")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("xtable")
loadPkg("kableExtra")
library(ggmap)
detach("package:ggplot2", unload = TRUE)
library(ISLR)
library(kableExtra)
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("xtable")
loadPkg("kableExtra")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
loadPkg("kableExtra")
install.packages("kableExtra")
loadPkg("kableExtra")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
intsall.packages("kableExtra")
loadPkg("xtable")
library("kableExtra")
loadPkg("xtable")
loadPkg("stringi")
loadPkg("leaps")
loadPkg("ggplot2")
loadPkg("ggmap")
loadPkg("xtable")
loadPkg("stringi")
loadPkg("leaps")
loadPkg("ggplot2")
library("ggmap")
loadPkg("xtable")
loadPkg("stringi")
loadPkg("leaps")
loadPkg("ggplot2")
# library("ggmap")
loadPkg("ISLR")
loadPkg("faraway")
loadPkg("xtable")
loadPkg("stringi")
loadPkg("leaps")
loadPkg("ggplot2")
# library("ggmap")
loadPkg("ISLR")
#loadPkg("faraway")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped", wide=FALSE) {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' Can also use as head for better display
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return HTML table for display
#' @examples
#' library("xtable")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
#' xkabledply( ISLR::Hitters[1:5,] )
if (wide) { modelsmmrytable <- t(modelsmmrytable) }
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos)
}
xkabledplyhead = function(df, rows=5, title="Head", digits = 4, pos="left", bso="striped") {
xkabledply(df[1:rows, ], title, digits, pos, bso, wide=FALSE)
}
xkabledplytail = function(df, rows=5, title="Tail", digits = 4, pos="left", bso="striped") {
trows = nrow(df)
xkabledply(df[ (trows-rows+1) : trows, ], title, digits, pos, bso, wide=FALSE)
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=TRUE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~.-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forwad")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~.-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forward")
plot(reg.10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.10.forward, scale = "cp", main = "Cp")
### now we use dataset food on the master branch which has been extracted
food <- data.frame(read.csv("food.csv"))
dim(food)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
# Changed y variable name
colnames(food)[8] <- c("Desert")
#str(food)
# Deciding Best Varaible with Forward Selection and Subsetting
reg.10.forward <-regsubsets(Desert~.-CensusTract-State-TractLOWI-TractKids-TractSeniors, data = food, nvmax=10, nbest=1, method="forward")
plot(reg.10.forward, scale = "adjr2", main = "Adjusted R^2")
plot(reg.10.forward, scale = "Cp", main = "CP")
plot(reg.10.forward, scale = "bic", main = "BIC")
# Backward Selection
reg.best10.bkwd <- regsubsets(Desert~.-CensusTract-State-TractLOWI-TractKids-TractSeniors, data= food, nvmax=10, nbest=1, method="backward")
plot(reg.best10.bkwd, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.bkwd, scale = "bic", main = "BIC")
plot(reg.best10.bkwd, scale = "Cp", main = "CP")
# Sequential Selection
reg.best10.seq <- regsubsets(Desert~.-CensusTract-State-TractLOWI-TractKids-TractSeniors, data= food, nvmax=10, nbest=1, method="seqrep")
plot(reg.best10.seq, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10.seq, scale = "Cp", main = "CP")
plot(reg.best10.seq, scale = "bic", main = "BIC")
#Correlation Tests on x variables and y
#cor.test(food$POP2010, food$Desert)
#cor.test(food$TractBlack, food$Desert)
#cor.test(food$PovertyRate, food$Desert)
#cor.test(food$TractSNAP, food$Desert)
reg.10.forward
reg.best10.seq <- regsubsets(Desert~CensusTract+State+TractLOWI+TractKids+TractSeniors, data= food, nvmax=10, nbest=1, method="seqrep")
reg.best10.seq
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
exp(glm_1sttry$coefficients)
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
loadPkg("leaps")
loadPkg("ggplot2")
loadPkg("ggmap")
loadPkg("ISLR")
loadPkg("faraway")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped", wide=FALSE) {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' Can also use as head for better display
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return HTML table for display
#' @examples
#' library("xtable")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
#' xkabledply( ISLR::Hitters[1:5,] )
if (wide) { modelsmmrytable <- t(modelsmmrytable) }
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos)
}
xkabledplyhead = function(df, rows=5, title="Head", digits = 4, pos="left", bso="striped") {
xkabledply(df[1:rows, ], title, digits, pos, bso, wide=FALSE)
}
xkabledplytail = function(df, rows=5, title="Tail", digits = 4, pos="left", bso="striped") {
trows = nrow(df)
xkabledply(df[ (trows-rows+1) : trows, ], title, digits, pos, bso, wide=FALSE)
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=TRUE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
