<<<<<<< Updated upstream
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
# Fix outliers
# Fix outliers
outlierKD2 <- function(df, var, rm=FALSE) {
#' Original outlierKD functino by By Klodian Dhana,
#' https://www.r-bloggers.com/identify-describe-plot-and-remove-the-outliers-from-the-dataset/
#' Modified to have third argument for removing outliers inwtead of interactive prompt,
#' and after removing outlier, original df will not be changed. The function returns the new df,
#' which can be saved as original df name if desired.
#' Check outliers, and option to remove them, save as a new dataframe.
#' @param df The dataframe.
#' @param var The variable in the dataframe to be checked for outliers
#' @param rm Boolean. Whether to remove outliers or not.
#' @return The dataframe with outliers replaced by NA if rm==TRUE, or df if nothing changed
#' @examples
#' outlierKD2(mydf, height, FALSE)
#' mydf = outlierKD2(mydf, height, TRUE)
#' mydfnew = outlierKD2(mydf, height, TRUE)
dt = df # duplicate the dataframe for potential alteration
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "\n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "\n")
cat("Mean of the outliers:", round(mo, 2), "\n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "\n")
cat("Mean if we remove outliers:", round(m2, 2), "\n")
# response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
# if(response == "y" | response == "yes"){
if(rm){
dt[as.character(substitute(var))] <- invisible(var_name)
#assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "\n")
return(invisible(dt))
} else {
cat("Nothing changed", "\n")
return(invisible(df))
}
}
# sample usage
# mlb2 = outlierKD2(mlb, weight, TRUE) # This will remove weight outliers, replace those values by NA, then save it as a new dataframe mlb2
# mlb = outlierKD2(mlb, weight, TRUE) # This will remove weight outliers, replace those values by NA, then REPLACE the dataframe mlb with the new one.
# outlierKD2(mlb, weight, FALSE) # This will NOT remove weight outliers, but it will show the charts with and without outliers nonetheless.
# outlierKD2(mlb, weight) # same as above, as the last argument is optional, default = FALSE
food <- data.frame(read.csv("food.csv"))
food <- subset(food, POP2010 > 1)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
food$Urban <- as.factor(food$Urban)
colnames(food)[8] <- c("Desert")
str(food)
# Poverty Rate Normality of Tracts
hist(food$PovertyRate, main="Histogram of Percentage of Tract at or Below Federal Poverty Rate", xlab="Poverty Rate", col="purple")
qqnorm(food$PovertyRate, main="Q-Q plot of Percentage of Tract at or Below Poverty Rate")
qqline(food$PovertyRate)
outlierKD2(food, PovertyRate, FALSE)
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
# the loadPkg function essentially replaced/substituted two functions install.packages() and library() in one step.
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
loadPkg("leaps")
loadPkg("ggplot2")
loadPkg("ggmap")
loadPkg("ISLR")
loadPkg("faraway")
loadPkg("tigris")
loadPkg("acs")
loadPkg("stringr")
loadPkg("ggpubr")
loadPkg("dplyr")
loadPkg("leaps")
loadPkg("MASS")
loadPkg("corrplot")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped", wide=FALSE) {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' Can also use as head for better display
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return HTML table for display
#' @examples
#' library("xtable")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
#' xkabledply( ISLR::Hitters[1:5,] )
if (wide) { modelsmmrytable <- t(modelsmmrytable) }
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos)
}
xkabledplyhead = function(df, rows=5, title="Head", digits = 4, pos="left", bso="striped") {
xkabledply(df[1:rows, ], title, digits, pos, bso, wide=FALSE)
}
xkabledplytail = function(df, rows=5, title="Tail", digits = 4, pos="left", bso="striped") {
trows = nrow(df)
xkabledply(df[ (trows-rows+1) : trows, ], title, digits, pos, bso, wide=FALSE)
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=TRUE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
# Fix outliers
# Fix outliers
outlierKD2 <- function(df, var, rm=FALSE) {
#' Original outlierKD functino by By Klodian Dhana,
#' https://www.r-bloggers.com/identify-describe-plot-and-remove-the-outliers-from-the-dataset/
#' Modified to have third argument for removing outliers inwtead of interactive prompt,
#' and after removing outlier, original df will not be changed. The function returns the new df,
#' which can be saved as original df name if desired.
#' Check outliers, and option to remove them, save as a new dataframe.
#' @param df The dataframe.
#' @param var The variable in the dataframe to be checked for outliers
#' @param rm Boolean. Whether to remove outliers or not.
#' @return The dataframe with outliers replaced by NA if rm==TRUE, or df if nothing changed
#' @examples
#' outlierKD2(mydf, height, FALSE)
#' mydf = outlierKD2(mydf, height, TRUE)
#' mydfnew = outlierKD2(mydf, height, TRUE)
dt = df # duplicate the dataframe for potential alteration
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "\n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "\n")
cat("Mean of the outliers:", round(mo, 2), "\n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "\n")
cat("Mean if we remove outliers:", round(m2, 2), "\n")
# response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
# if(response == "y" | response == "yes"){
if(rm){
dt[as.character(substitute(var))] <- invisible(var_name)
#assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "\n")
return(invisible(dt))
} else {
cat("Nothing changed", "\n")
return(invisible(df))
}
}
# sample usage
# mlb2 = outlierKD2(mlb, weight, TRUE) # This will remove weight outliers, replace those values by NA, then save it as a new dataframe mlb2
# mlb = outlierKD2(mlb, weight, TRUE) # This will remove weight outliers, replace those values by NA, then REPLACE the dataframe mlb with the new one.
# outlierKD2(mlb, weight, FALSE) # This will NOT remove weight outliers, but it will show the charts with and without outliers nonetheless.
# outlierKD2(mlb, weight) # same as above, as the last argument is optional, default = FALSE
food <- data.frame(read.csv("food.csv"))
food <- subset(food, POP2010 > 1)
food$State<-as.factor(food$State)
food$Region <- as.factor(food$Region)
food$Urban <- as.factor(food$Urban)
colnames(food)[8] <- c("Desert")
str(food)
# Poverty Rate Normality of Tracts
hist(food$PovertyRate, main="Histogram of Percentage of Tract at or Below Federal Poverty Rate", xlab="Poverty Rate", col="purple")
qqnorm(food$PovertyRate, main="Q-Q plot of Percentage of Tract at or Below Poverty Rate")
qqline(food$PovertyRate)
outlierKD2(food, PovertyRate, FALSE)
# The Poverty Rate is still slightly skewed to the right with and without outliers and the mean with outliers is about 16% and without outliers it is about 15% so this did not change much.
# Poverty Rate Normality of Tracts in Food Desert
food.desert <- subset(food, Desert==1)
hist(food.desert$PovertyRate, main="Histogram of the Percentage of Tract at or Below Poverty Rate in a Food Desert", xlab= "Poverty Rate", col="blue")
qqnorm(food.desert$PovertyRate, main="Percentage of Tract in Food Desert at or Below Poverty Rate")
qqline(food.desert$PovertyRate)
outlierKD2(food.desert, PovertyRate, FALSE)
# When we subset our data to only census tracts that are located in food deserts the mean is 26.97 which means about 27% of households located in a food desert   are at or below the federal poverty rate. Furthermore, when we use this subset to take out outliers we only have 36 outliers and the mean changes from 26.97 to 25.42 so there is no signifcant change in removing outliers within this subset. However, within this subset after we move the outliers we can see that our   histogram is more normally distributed. With outliers our distribution is skewed to the right like it is without subsetting the data.
#Population or POP2010 Normality Test
summary(food$POP2010)
hist(food$POP2010, main="Histogram of Population in Tract", xlab="Population", col="red")
qqnorm(food$POP2010, main="Q-Q Plot of Tract Population")
qqline(food$POP2010)
# We can tell from our Histogram and Q-Q plot that the distributon of the population is skewed to righly skewed and does not have any since of normality.
# Population Normality Test of only areas with Food Deserts
hist(food.desert$POP2010, main="Histogram of Population of Tract in Food Desert", xlab="Population", col="yellow")
qqnorm(food.desert$POP2010, main="Q-Q Plot of Food Desert Population Tract")
qqline(food.desert$POP2010)
summary(food.desert$POP2010)
# When looking at the normality of the population distribution when the tract is located in a food desert the Q-Q plot seems to resemeble more of a straight line but the histogram is still slighly skewed to the right. However, the minimum, maximum, median, and mean values change significanlty when reviewing the population of a tract in a food desert versus not.
# Finding Outliers
outlierKD2(food, POP2010, rm=FALSE)
outlierKD2(food.desert, POP2010, rm=FALSE)
# When looking at these results we can see that when we remove our outliers the data become significantly more normally distributed even though our mean with outliers is 4,270 and without otuliers the mean is 4,131. This is not a huge different but the because of the drastic shape in our histogram and bellcurve, it might be worth removing the outliers in our population variable. When looking at the outliers in locations that are considered food deserts our mean with outliers is 4,360 and without outliers is 4,254. Though with and without outliers our distribution is slightly skewed to the right it is a bit more noramlly distributed without outliers just like it is in food deserts and non-deserts.
hist(food$OHU2010, main="Histogram of Housing Units", xlab="Housing", col="orange")
qqnorm(food$OHU2010, main="Q-Q Plot of Housing Units")
qqline(food$OHU2010)
# When we are looking at our results of the total occupied housing units in the tracts we can see that the data points are righly skewed.
# Occupied Housing Normality for only food deserts
hist(food.desert$OHU2010, main="Histogram of Housing Units in Food Deserts", xlab="Housing in Food Desert", col="pink")
qqnorm(food.desert$OHU2010, main="Q-Q Plot of Housing in Food Desert")
qqline(food.desert$OHU2010)
# When we are looking at the total occupied housing units in tracts that are classified as food deserts it seems that the distribution is still slightly skewed to the right. However, the Q-Q plot of this data is definetly more normally distributed in the subset of food desert than the whole data frame.
# Finding Outliers
outlierKD2(food, OHU2010, rm=FALSE)
outlierKD2(food.desert, OHU2010, rm=FALSE)
# When we look at the outliers of the data frame there are 115 total outliers and the mean with the outliers is 1,615 and without outliers the mean is 1,571 so nothing really changes by removing the outliers. Also, with and without outliers are distribution is skewed to the right. When looking at the outliers in our subset that only incldues tracts in food deserts we can see that there are only 10 outliers. The mean with the outliers is 1,605 and without outliers is 1,579 so nothing really changes by removing the outliers. However, our Q-Q plot of the subset of occupied housing units in food deserts resembles more of a straight line that the data points in the data frame. Nonetheless, the subset's distribution is still rightly-skewed.
summary(food$NUMGQTRS)
hist(food$NUMGQTRS, main="Histogram of Group Housing Units", xlab="Group Housing", col="dark green")
qqnorm(food$NUMGQTRS, main="Q-Q Plot of Group Housing Units")
qqline(food$NUMGQTRS)
# Group Housing units distribution is not normal. It is skewed righ, but barely skewed right. The Q-Q Plot does not even slightly resemeble a straight line.
# Group Housing Normality for only food deserts
hist(food.desert$NUMGQTRS, main="Histogram of Group Housing Units in Food Deserts", xlab=" Group Housing in Food Desert", col="light blue ")
qqnorm(food.desert$OHU2010, main="Q-Q Plot of Housing in Food Desert")
qqline(food.desert$OHU2010)
# When we take the subset of group hosuing units only located in food deserts the distribution improves a bit more at least with our Q-Q plot. However, the histogram still resembles a right-skewed distribution.
# Finding Outliers
outlierKD2(food, NUMGQTRS, rm=FALSE)
outlierKD2(food.desert, NUMGQTRS, rm=FALSE)
# When we look at the group housing outliers in the data frame there are 831. The mean of the data with the outliers is 110 and without the outliers the mean is 24. This is a pretty big drop in the mean than from the other variables that we have seen, but nonetheless the data still has a right-skewed distribution and would yield the same results. When we are looking at the outliers from the subset of group housing units in food deserts the mean also has a big drop. With the outliers the mean is 200 and without outliers the mean is 42. However, the distribution is still right-skewed and would yield the same results.
summary(food$MedianFamilyIncome)
hist(food$MedianFamilyIncome, main="Histogram of Median Family Income", col="dark blue")
qqnorm(food$MedianFamilyIncome, main="Q-Q Plot of Median Family Income")
qqline(food$MedianFamilyIncome)
# The median family income for the data frame is right-skewed. Though the Q-Q plot resembles a straight line representing some type of normality in the distribution.
# Median Family Income of only Food Deserts
hist(food.desert$MedianFamilyIncome, main="Histogram of Median Family Income in Food Deserts", col="dark red")
qqnorm(food.desert$MedianFamilyIncome, main="Q-Q Plot of Median Family Income in Food Deserts")
qqline(food.desert$MedianFamilyIncome)
# When looking at the distribution of the median family income for tracts that are located in food deserts again we can see that the distribution is right-skewed or positive. The Q-Q plot does resemble a striaght line showcasing a resembles of a normal distribution.
#Finding Outliers
outlierKD2(food, MedianFamilyIncome, rm=FALSE)
outlierKD2(food.desert, MedianFamilyIncome, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
summary(food$TractLOWI)
hist(food$TractLOWI, main="Histogram of Low-Income Population", col="light green")
qqnorm(food$TractLOWI, main="Q-Q Plot of Low-Income Population")
qqline(food$TractLOWI)
# The low-income population for the data frame is right-skewed. The Q-Q plot resembles reflects the histogram's distribution and is right-skewed or positive.
# Low-Income Population of only Food Deserts
hist(food.desert$TractLOWI, main="Histogram of Low-Income Population in Food Deserts", col="red")
qqnorm(food.desert$TractLOWI, main="Q-Q Plot of   Low-Income Population in Food Deserts")
qqline(food.desert$TractLOWI)
# The low-income population for the subset of food deserts is right-skewed. The Q-Q plot resembles reflects the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food, TractLOWI, rm=FALSE)
outlierKD2(food.desert, TractLOWI, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
hist(food$TractKids, main="Histogram of Kid Count", col="purple")
qqnorm(food$TractKids, main="Q-Q Plot of Kid Count in Tract")
qqline(food$TractKids)
# The number of kids in a census tract for the data frame is right-skewed. The Q-Q plot resembles  the histogram's distribution and is right-skewed or positive.
# Kid Count of only Food Deserts
hist(food.desert$TractKids, main="Histogram of Kid Count in Food Deserts", col="yellow")
qqnorm(food.desert$TractKids, main="Q-Q Plot of Kid Count Population in Food Deserts")
qqline(food.desert$TractKids)
# The kid count for the subset of food deserts is right-skewed. The Q-Q plot resembles  the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food, TractKids, rm=FALSE)
outlierKD2(food.desert, TractKids, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
hist(food$TractSeniors, main="Histogram of Seniors in Tract", col="brown")
qqnorm(food$TractSeniors, main="Q-Q Plot of Seniors in Tract")
qqline(food$TractSeniors)
# The number of seniors in  the data frame is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
# Low-Income Population of only Food Deserts
hist(food.desert$TractSeniors, main="Histogram of Seniors in Food Deserts", col="pink")
qqnorm(food.desert$TractSeniors, main="Q-Q Plot of Seniors in Food Deserts")
qqline(food.desert$TractSeniors)
# The number of seniors for the subset of food deserts is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food, TractSeniors, rm=FALSE)
outlierKD2(food.desert, TractSeniors, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
summary(food$TractWhite)
hist(food$TractWhite, main="Histogram of White Population", col="orange")
qqnorm(food$TractWhite, main="Q-Q Plot of White Population")
qqline(food$TractWhite)
# The white population for the data frame is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
# White Populatin in only Food Deserts
hist(food.desert$TractWhite, main="Histogram of White Population in Food Deserts", col="dark green")
qqnorm(food.desert$TractWhite, main="Q-Q Plot of White Population in Food Deserts")
qqline(food.desert$TractWhite)
# The white population for the subset of food deserts is right-skewed. The Q-Q plot resembles reflects the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food, TractLOWI, rm=FALSE)
outlierKD2(food.desert, TractLOWI, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
hist(food$TractBlack, main="Histogram of Black Population", col="dark red")
qqnorm(food$TractBlack, main="Q-Q Plot of Black Population")
qqline(food$TractBlack)
# The black population for the data frame is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
# Black Population of only Food Deserts
hist(food.desert$TractBlack, main="Histogram of Black Population in Food Deserts", col="red")
qqnorm(food.desert$TractBlack, main="Q-Q Plot of Black Population in Food Deserts")
qqline(food.desert$TractBlack)
# The black population for the subset of food deserts is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food, TractBlack, rm=FALSE)
outlierKD2(food.desert, TractBlack, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
hist(food$TractAsian, main="Histogram of Asian Population", col="dark orange")
qqnorm(food$TractAsian, main="Q-Q Plot of Asian Population")
qqline(food$TractAsian)
# The Asian population for the data frame is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
# Asian Population of only Food Deserts
hist(food.desert$TractAsian, main="Histogram of Asian Population in Food Deserts", col="green")
qqnorm(food.desert$TractAsian, main="Q-Q Plot of Asian Population in Food Deserts")
qqline(food.desert$TractAsian)
# The Asian population for the subset of food deserts is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food, TractAsian, rm=FALSE)
outlierKD2(food.desert, TractAsian, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
hist(food$TractNHOPI, main="Histogram of Native Hawaiian or Pacific Islander  Population", col="blue")
qqnorm(food$TractNHOPI, main="Q-Q Plot of Native Hawaiian or Pacific Islander Population")
qqline(food$TractNHOPI)
# The Native Hawaiian or Pacific Islander population for the data frame is right-skewed. The Q-Q plot resembles reflects the histogram's distribution and is right-skewed or positive.
# Native Hawaiian or Pacific Islander Population in only Food Deserts
hist(food.desert$TractNHOPI, main="Histogram of Native Hawaiian or Pacific Islander Population in Food Deserts", col="light blue")
qqnorm(food.desert$TractNHOPI, main="Q-Q Plot of Native Hawaiian or Pacific Islander Population in Food Deserts")
qqline(food.desert$TractNHOPI)
# The Native Hawaiian or Pacific Islander population for the subset of food deserts is right-skewed. The Q-Q plot resembles reflects the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food, TractNHOPI, rm=FALSE)
outlierKD2(food.desert, TractNHOPI, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
hist(food$TractAIAN, main="Histogram of American Indian and Alaskan Native Population", col="orange")
qqnorm(food$TractAIAN, main="Q-Q Plot of American Indian and Alaskan Native Population")
qqline(food$TractAIAN)
# The American Indian and Alaskan Native populatio for the data frame is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
# American Indian and Alaskan Native Population in only Food Deserts
hist(food.desert$TractAIAN, main="Histogram of American Indian and Alaskan Native Population in Food Deserts", col="red")
qqnorm(food.desert$TractAIAN, main="Q-Q Plot of American Indian and Alaskan Native Population in Food Deserts")
qqline(food.desert$TractAIAN)
# The American Indian and Alaskan Native population for the subset of food deserts is right-skewed. The Q-Q plot resembles the histogram's distribution and is right-skewed or positive.
#Finding Outliers
outlierKD2(food,TractAIAN , rm=FALSE)
outlierKD2(food.desert, TractAIAN, rm=FALSE)
#By removing the outliers from our data frame and the subset that only includes food deserts nothing changes and our distribution is still right-skewed.
hist(food$TractOMultir, main="Histogram of Multiple race/other race population", col="orange")
qqnorm(food$TractOMultir, main="Q-Q Plot of Multiple race/other race population")
qqline(food$TractOMultir)
hist(food.desert$TractOMultir, main="Histogram of Multiple race/other race population in Food Deserts", col="red")
qqnorm(food.desert$TractOMultir, main="Q-Q Plot of Multiple race/other race population in Food Deserts")
qqline(food.desert$TractOMultir)
#Finding Outliers
outlierKD2(food,TractAIAN,rm=FALSE)
outlierKD2(food.desert, TractAIAN, rm=FALSE)
hist(food$TractHispanic, main="Histogram of Hispanic or Latinx population", col="orange")
qqnorm(food$TractHispanic, main="Q-Q Plot of Hispanic or Latinx population")
qqline(food$TractHispanic)
hist(food.desert$TractHispanic, main="Histogram of Hispanic or Latinx population in Food Deserts", col="red")
qqnorm(food.desert$TractHispanic, main="Q-Q Plot of Hispanic or Latinx population in Food Deserts")
qqline(food.desert$TractHispanic)
#Finding Outliers
outlierKD2(food,TractHispanic,rm=FALSE)
outlierKD2(food.desert, TractHispanic, rm=FALSE)
hist(food$TractHUNV, main="Histogram of housing units without access to a vehicle", col="orange")
qqnorm(food$TractHUNV, main="Q-Q Plot of housing units without access to a vehicle")
qqline(food$TractHUNV)
hist(food.desert$TractHUNV, main="Histogram of housing units without access to a vehicle in Food Deserts", col="red")
qqnorm(food.desert$TractHUNV, main="Q-Q Plot of housing units without access to a vehicle in Food Deserts")
qqline(food.desert$TractHUNV)
#Finding Outliers
outlierKD2(food,TractHUNV,rm=FALSE)
outlierKD2(food.desert, TractHUNV, rm=FALSE)
hist(food$TractSNAP, main="Histogram of housing units receiving SNAP benefits", col="orange")
qqnorm(food$TractSNAP, main="Q-Q Plot of housing units receiving SNAP benefits")
qqline(food$TractSNAP)
hist(food.desert$TractSNAP, main="Histogram of housing units receiving SNAP benefits in Food Deserts", col="red")
qqnorm(food.desert$TractSNAP, main="Q-Q Plot of housing units receiving SNAP benefits in Food Deserts")
qqline(food.desert$TractSNAP)
#Finding Outliers
outlierKD2(food,TractSNAP,rm=FALSE)
outlierKD2(food.desert,TractSNAP, rm=FALSE)
# Contigency Table of Food Deserts and Urban Tract
contable.urban <- table(food$Urban, food$Desert)
xkabledply(contable.urban, title="Contingency Table for Food Deserts in Urban Tracts")
urban.tble <- chisq.test(contable.urban)
urban.tble
urban.tble$expected
xkabledply(urban.tble$expected, title="Cross table for the Expected Frequencies of Food Deserts in Urban Tracts")
exp(urban.tble$p.value)
# Contingency Table of Food Deserts and Geographical Region
contable.region <- table(food$Region, food$Desert)
xkabledply(contable.region, title="Contingency Table for Food Deserts located in Geographical Regions")
region.tble <- chisq.test(contable.region)
region.tble
region.tble$expected
xkabledply(region.tble$expected, title="Cross table for the Expected Frequencies of Food Deserts in Geographical Regions")
# Contingency Table of Food Deserts and States
contable.state <- table(food$State, food$Desert)
xkabledply(contable.state, title="Contingency Table for Food Deserts located in U.S. States")
state.tble <- chisq.test(contable.state)
state.tble
state.tble$expected
state.tble$p.value
xkabledply(state.tble$expected, title="Cross table for the Expected Frequencies of Food Deserts in U.S. Staes")
=======
# reg.exhaustive <-bestglm(X,  family = gaussian, IC = "BIC", t = "default",
# CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL,
#nvmax = "default", RequireFullEnumerationQ = FALSE)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
View(Desert)
# Deciding Best Varaible with Forward Selection and Subsetting
Desert <- (food[food[,8],])[,-8]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
# reg.exhaustive <-bestglm(X,  family = gaussian, IC = "BIC", t = "default",
# CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL,
#nvmax = "default", RequireFullEnumerationQ = FALSE)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
Desert <- (food[food[,8],])[,-8]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food(-c("CensusTract,"State","Region"))
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,-c("CensusTract,"State","Region")])
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,-c("CensusTract,"State","Region")]
View(food)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,-1:3]
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:22]
Desert <- (food[food[,8],])[,-8,]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:22]
Desert <- (desert[desert[,8],])[,-8,]
X <-Desert
y <-desert[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
View(desert)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,8],])[,-8,]
X <-Desert
y <-desert[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,8],])[,-8,]
X <-Desert
y <-desert[,8]
#Xy<-cbind(as.data.frame(X), lpsa=y)
#glm.best <- bestglm(Xy)
# reg.exhaustive <-bestglm(X,  family = gaussian, IC = "BIC", t = "default",
# CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL,
#nvmax = "default", RequireFullEnumerationQ = FALSE)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,8],])[,-8,]
X <-Desert
y <-desert[,8]
y
#Xy<-cbind(as.data.frame(X), lpsa=y)
#glm.best <- bestglm(Xy)
# reg.exhaustive <-bestglm(X,  family = gaussian, IC = "BIC", t = "default",
# CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL,
#nvmax = "default", RequireFullEnumerationQ = FALSE)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,8],])[,-8,]
X <-Desert
y <-desert[,8]
str(y)
#Xy<-cbind(as.data.frame(X), lpsa=y)
#glm.best <- bestglm(Xy)
# reg.exhaustive <-bestglm(X,  family = gaussian, IC = "BIC", t = "default",
# CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL,
#nvmax = "default", RequireFullEnumerationQ = FALSE)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,5],])[,-5,]
X <-Desert
y <-desert[,5]
str(y)
#Xy<-cbind(as.data.frame(X), lpsa=y)
#glm.best <- bestglm(Xy)
# reg.exhaustive <-bestglm(X,  family = gaussian, IC = "BIC", t = "default",
# CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL,
#nvmax = "default", RequireFullEnumerationQ = FALSE)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,5],])[,-5,]
X <-Desert
y <-desert[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
#glm.best <- bestglm(Xy)
# reg.exhaustive <-bestglm(X,  family = gaussian, IC = "BIC", t = "default",
# CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL,
#nvmax = "default", RequireFullEnumerationQ = FALSE)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,5],])[,-5,]
X <-Desert
y <-desert[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,5],])[,-5,]
X <-Desert
y <-desert[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, family = binomial, IC = "BIC", t = "default",
CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL, nvmax = "default", RequireFullEnumerationQ = FALSE)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (desert[desert[,5],])[,-5,]
X <-Desert
y <-desert[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, family = binomial, IC = "BIC", t = "default",
CVArgs = "default", qLevel = 0.99, TopModels = 5, method = "exhaustive", intercept = TRUE, weights = NULL, nvmax = "default", RequireFullEnumerationQ = FALSE)
# Deciding Best Varaible with Forward Selection and Subsetting
#desert <- food[,4:19]
Desert <- (food[food[,8],])[,-8,]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = "15", method="exhaustive")
# Deciding Best Varaible with Forward Selection and Subsetting
#desert <- food[,4:19]
Desert <- (food[food[,8],])[,-8,]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = 15, method="exhaustive")
# Deciding Best Varaible with Forward Selection and Subsetting
#desert <- food[,4:19]
Desert <- (food[food[,8],])[,-8,]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = 15, method="exhaustive")
### Model Building
## Change variable 'Desert' to factor variable here and the new dataset is named as newfood now
newfood<-food
newfood$Desertfactor<-as.factor(newfood$Desert)
newfood<-newfood[,-8]
glm_food_int_Desert<-glm(Desert~.-CensusTract,data = food,family = "binomial")
summary(glm_food_int_Desert)
glm_newfood_fac_Desert<-glm(Desertfactor~.-CensusTract-TractHispanic-TractBlack-TractWhite-TractAsian-TractSNAP,data = newfood,family = "binomial")
summary(glm_newfood_fac_Desert)
exp(glm_newfood_fac_Desert$coefficients)
## build an empty and full generalised linear model
emptyglm<-glm(Desertfactor~1,data=newfood,family = binomial)
summary(emptyglm)
fullglm<-glm(Desertfactor~.-CensusTract,data=newfood,family = binomial)
summary(fullglm)
forwards<-step(emptyglm,scope=list(lower=formula(emptyglm),upper=formula(fullglm)),direction = "forward")
# Deciding Best Varaible with Forward Selection and Subsetting
#desert <- food[,4:19]
Desert <- (food[food[,8],])[,-8,]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = 15, method="exhaustive")
# Deciding Best Varaible with Forward Selection and Subsetting
#desert <- food[,4:19]
#Desert <- (food[food[,8],])[,-8,]
#X <-Desert
#y <-food[,8]
#Xy<-cbind(as.data.frame(X), lpsa=y)
#glm.best <- bestglm(Xy, nvmax = 15, method="exhaustive")
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
summary(model_forward_adjr2)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (food[food[,8],])[,-8,]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = 15, method="exhaustive")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (food[food[,8],])[,-8,]
X <-Desert
y <-food[,8]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = 15, method="forward")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:19]
Desert <- (food[food[,5],])[,-5,]
X <-Desert
y <-food[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = 15, method="forward")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:18]
Desert <- (food[food[,5],])[,-5,]
X <-Desert
y <-food[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, nvmax = 15, method="forward")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:18]
Desert <- (food[food[,5],])[,-5,]
X <-Desert
y <-food[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy, method="forward")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:18]
Desert <- (food[food[,5],])[,-5,]
X <-Desert
y <-food[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
Desert <- (food[food[,5],])[,-5,]
X <-Desert
y <-food[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy)
food_coronly <- food[c("Desert","POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
food_coronly <- food[c("POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
(corr.food)
food_coronly <- food[c("POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
(corr.food)
corrplot(cor.food)
food_coronly <- food[c("POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
(corr.food)
corrplot(corr.food)
### Model Building
## Change variable 'Desert' to factor variable here and the new dataset is named as newfood now
newfood<-food
newfood$Desertfactor<-as.factor(newfood$Desert)
newfood<-newfood[,-8]
glm_food_int_Desert<-glm(Desert~.-CensusTract,data = food,family = "binomial")
summary(glm_food_int_Desert)
glm_newfood_fac_Desert<-glm(Desertfactor~.-CensusTract-TractHispanic-TractBlack-TractWhite-TractAsian-TractSNAP,data = newfood,family = "binomial")
summary(glm_newfood_fac_Desert)
exp(glm_newfood_fac_Desert$coefficients)
## build an empty and full generalised linear model
emptyglm<-glm(Desertfactor~1,data=newfood,family = binomial)
summary(emptyglm)
fullglm<-glm(Desertfactor~.-CensusTract,data=newfood,family = binomial)
summary(fullglm)
forwards<-step(emptyglm,scope=list(lower=formula(emptyglm),upper=formula(fullglm)),direction = "forward")
### Model Building
## Change variable 'Desert' to factor variable here and the new dataset is named as newfood now
newfood<-food
newfood$Desertfactor<-as.factor(newfood$Desert)
newfood<-newfood[,-8]
glm_food_int_Desert<-glm(Desert~.-CensusTract,data = food,family = "binomial")
summary(glm_food_int_Desert)
glm_newfood_fac_Desert<-glm(Desertfactor~.-CensusTract-TractHispanic-TractBlack-TractWhite-TractAsian-TractSNAP,data = newfood,family = "binomial")
summary(glm_newfood_fac_Desert)
exp(glm_newfood_fac_Desert$coefficients)
## build an empty and full generalised linear model
emptyglm<-glm(Desertfactor~1,data=newfood,family = binomial)
summary(emptyglm)
fullglm<-glm(Desertfactor~.-CensusTract,data=newfood,family = binomial)
# summary(fullglm)
forwards<-step(emptyglm,scope=list(lower=formula(emptyglm),upper=formula(fullglm)),direction = "forward")
### Model Building
## Change variable 'Desert' to factor variable here and the new dataset is named as newfood now
newfood<-food
newfood$Desertfactor<-as.factor(newfood$Desert)
newfood<-newfood[,-8]
glm_food_int_Desert<-glm(Desert~.-CensusTract,data = food,family = "binomial")
summary(glm_food_int_Desert)
glm_newfood_fac_Desert<-glm(Desertfactor~.-CensusTract-TractHispanic-TractBlack-TractWhite-TractAsian-TractSNAP,data = newfood,family = "binomial")
summary(glm_newfood_fac_Desert)
exp(glm_newfood_fac_Desert$coefficients)
## build an empty and full generalised linear model
emptyglm<-glm(Desertfactor~1,data=newfood,family = binomial)
summary(emptyglm)
# fullglm<-glm(Desertfactor~.-CensusTract,data=newfood,family = binomial)
# summary(fullglm)
forwards<-step(emptyglm,scope=list(lower=formula(emptyglm),upper=formula(fullglm)),direction = "forward")
chisq.test(food$Urban,food$POP2010)
chisq.test(food$Region,food$POP2010)
chisq.test(food$State,food$POP2010)
chisq.test(food$OHU2010,food$POP2010)
chisq.test(food$Region,food$Urban)
chisq.test(food$PovertyRate,food$Urban)
chisq.test(food$PovertyRate,food$MedianFamilyIncome)
chisq.test(food$POP2010,food$NUMGQTRS)
>>>>>>> Stashed changes
chisq.test(food$Desert,food$POP2010)
chisq.test(food$Desert,food$OHU2010)
chisq.test(food$Desert,food$NUMGQTRS)
chisq.test(food$Desert,food$PovertyRate)
chisq.test(food$Desert,food$MedianFamilyIncome)
chisq.test(food$Desert,food$TractLOWI)
chisq.test(food$Desert,food$TractKids)
chisq.test(food$Desert,food$TractSeniors)
chisq.test(food$Desert,food$TractWhite)
chisq.test(food$Desert,food$TractBlack)
chisq.test(food$Desert,food$TractAsian)
chisq.test(food$Desert,food$TractNHOPI)
chisq.test(food$Desert,food$TractAIAN)
chisq.test(food$Desert,food$TractOMultir)
chisq.test(food$Desert,food$TractHispanic)
chisq.test(food$Desert,food$TractHUNV)
chisq.test(food$Desert,food$TractSNAP)
<<<<<<< Updated upstream
chisq.test(food$Urban,food$POP2010)
chisq.test(food$Region,food$POP2010)
chisq.test(food$State,food$POP2010)
chisq.test(food$OHU2010,food$POP2010)
chisq.test(food$Region,food$Urban)
chisq.test(food$PovertyRate,food$Urban)
chisq.test(food$PovertyRate,food$MedianFamilyIncome)
chisq.test(food$POP2010,food$NUMGQTRS)
food.corr <- cor(food)
food.corr <- cor(food)
food_coronly <- food[,c("Desert",POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
food_coronly <- food[c("Desert",POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
food_coronly <- food[c("Desert","POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
corrplot(corr.food)
food_coronly <- food[c("Desert","POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
corrplot(corr.food)
corr.food.all <- cor(food)
food_coronly <- food[c("Region","Urban","Region","Desert","POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
food_coronly <- food[c("Region","Desert","POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
food_coronly <- food[c("Desert","POP2010","OHU2010","NUMGQTRS","PovertyRate","MedianFamilyIncome","TractLOWI","TractKids","TractSeniors","TractWhite","TractBlack","TractAsian","TractNHOPI","TractAIAN","TractOMultir","TractHispanic","TractHUNV","TractSNAP")]
corr.food <- cor(food_coronly)
corrplot(corr.food)
View(corr.food)
=======
#chisq.test(food$Urban,food$POP2010)
#chisq.test(food$Region,food$POP2010)
#chisq.test(food$State,food$POP2010)
chisq.test(food$OHU2010,food$POP2010)
#chisq.test(food$Region,food$Urban)
#chisq.test(food$PovertyRate,food$Urban)
#chisq.test(food$PovertyRate,food$MedianFamilyIncome)
#chisq.test(food$POP2010,food$NUMGQTRS)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
Desert <- (food[food[,5],])[,-5,]
X <-Desert
y <-food[,5]
Xy<-cbind(as.data.frame(X), lpsa=y)
glm.best <- bestglm(Xy)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
glm.best <- bestglm(Xy = desert, family = binomial,IC = "AIC", method = "exhaustive")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
desert$y = food[,5]
glm.best <- bestglm(Xy = desert, family = binomial,IC = "AIC", method = "exhaustive")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
desert$y = food[,5]
glm.best <- bestglm(Xy = desert)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractSeniors-TractNHOPI-TractOMultir,data = food)
summary(model_forward_adjr2)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
desert$y = food[,5]
glm.best <- bestglm(Xy = desert)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractS#eniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
desert$y = food[,5]
glm.best <- bestglm(Xy = desert)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractS#eniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,4:17]
desert$y = food[,5]
glm.best <- bestglm(Xy = desert)
summary(glm.best)
#plot(reg.forward, scale = "adjr2", main = "Adjusted R^2")
#plot(reg.forward, scale = "Cp", main = "CP")
#plot(reg.forward, scale = "bic", main = "BIC")
#model_forward_adjr2<-lm(Desert~.-TractBlack,data = food)
#model_forward_Cp<-lm(Desert~.-TractBlack-TractWhite,data = food)
#model_forward_bic<-lm(Desert~.-TractBlack-TractWhite-OHU2010-TractKids-TractS#eniors-TractNHOPI-TractOMultir,data = food)
#summary(model_forward_adjr2)
#summary(model_forward_Cp)
#summary(model_forward_bic)
#anova(model_forward_adjr2,model_forward_Cp)
#anova(model_forward_adjr2,model_forward_bic)
#anova(model_forward_Cp,model_forward_bic)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,2:18]
desert$y = food[,6]
glm.best <- bestglm(Xy = desert)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,2:15]
desert$y = food[,6]
glm.best <- bestglm(Xy = desert)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,2:15]
desert$y = food[,6]
glm.best <- bestglm(Xy = desert)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,2:15]
desert$y = food[,6]
glm.best <- bestglm(Xy = desert, family = "binomial")
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,2:15]
desert$y = food[,6]
glm.best <- bestglm(Xy = desert, family = binomial)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,c("Urban","Region","Desert","POP2010","TractWhite","TractBlack","TractAsian","TractSNAP","MedianFamilyIncome","TractHUNV")]
desert$y = food[,"Desert"]
desert$y = ifelse(desert$y ==1,TRUE,FALSE)
desert$y = factor(desert$y)
glm.best <- bestglm(Xy = desert)
# Deciding Best Varaible with Forward Selection and Subsetting
desert <- food[,c("Urban","Region","Desert","POP2010","TractWhite","TractBlack","TractAsian","TractSNAP","MedianFamilyIncome","TractHUNV")]
desert$y = food[,"Desert"]
glm.best <- bestglm(Xy = desert)
>>>>>>> Stashed changes
