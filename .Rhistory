load.packages("Ncad")
load.packages("Ncat")
library(readr)
workinghours <- read_csv("workinghours.csv")
View(workinghours)
load.packages("Ecdat")
install.packages("Ecdat")
meaning("swcc")
library(readr)
Melbourne_housing_FULL <- read_csv("Melbourne_housing_FULL.csv")
View(Melbourne_housing_FULL)
Str(Melbourne_housing_FULL)
Housing <- data.frame(read.csv("Melbourne_housing_FULL.csv"))
Str(Housing)
Housing
str(housing)
str(Housing)
View(Housing)
str(Housing)
str(Hosuing$Bathroom)
Housing$Bathroom
summary(Hosuing$Postcode)
summary(Housing$Postcode)
summary(price)
summary(Housing$Price)
summary(Housing$Suburb)
Housing$Suburb
str(Housing)
class(Housing$Postcode)
Housing$CouncilArea
City Council = levels(Housing$CouncilArea)c("Boroondara City Council", "Darebin City Council", "Hobsons Bay City Council", "Monsah City Council", "Moonee Valley City Council", "Port Phillip City Council", "Stonnington City Council", "Yarra City ara City Council")
City Council = levels(Housing$CouncilArea)c("Boroondara City Council", "Darebin City Council", "Hobsons Bay City Council", "Monsah City Council", "Moonee Valley City Council", "Port Phillip City Council", "Stonnington City Council","Yarra City ara City Council")
City Council <- factor(Housing$CouncilArea), levels("Boroondara City Council", "Darebin City Council", "Hobsons Bay City Council", "Monsah City Council", "Moonee Valley City Council", "Port Phillip City Council", "Stonnington City Council","Yarra City ara City Council""))
City Council <- factor(Housing$CouncilArea), levels("Boroondara City Council", "Darebin City Council", "Hobsons Bay City Council", "Monsah City Council", "Moonee Valley City Council", "Port Phillip City Council", "Stonnington City Council","Yarra City ara City Council"))
Housing$CouncilArea
getOption("max.print")
ousing_narm$Suburb<-as.factor(housing_narm$Suburb)
housing_narm$CouncilArea<-as.factor(housing_narm$CouncilArea)
housing_narm<-housing_narm[,c(-2,-7,-8,-10,-18,-19,-20,-21)]
Housing$CouncilArea <-as.factor(Housing$CouncilArea)
Housing$CouncilArea
load("~/Documents/github.ag/6101_teamB/.RData")
Food.Access <- data.frame(read.csv("Food_Access_Data.csv"))
Food.Access
View(Food.Access)
str(Food.Access)
str(Food.Access, list.len = 72864)
str(Housing)
str(Food.Access)
library(readr)
USDA_Food_Access_Regions <- read_csv("USDA_Food_Access_Regions.csv")
View(USDA_Food_Access_Regions)
food.access <- data.frame(read.csv("USDA_Food_Access_Regions.csv"))
food.access
str(food.access)
load("~/Documents/github.ag/6101_teamB/.RData")
remove(Food.Access)
remove(workinghours)
remove(Melbourne_housing_FULL)
remove(Housing)
library(readr)
food <- read_csv("food.csv")
View(food)
data.frame(read.csv("Food_Access"))
food.access <- data.frame(read.csv("Food_Access_State_And_Region"))
food.access <- data.frame(read.csv("Food_Access_State_And_Region.csv"))
food.access
str(food.access)
install.packages(c("ggpubr", "gplots"))
source('~/Documents/github.ag/6101_teamB/1st try on food.R')
View(my_data)
View(glm_1sttry)
chisq.test(food.access$Region, y=food.access$LILATracts_1And10)
chisq.test(food$Urban,y=food$LILATracts_1And10)
summary(food)
my_data <- food
set.seed(123)
dplyr::sample_n(my_data,10)
levels(my_data$State)
#Creating levels as seen under the my_data
my_data$State <- ordered(my_data$POP2010)
levels = c("State", "Urban", "POP2010","OHU2010", "NUMGQTRS", "LILATracts_1And10", "PovertyRate", "MedianFamilyIncome",
"TractLOWI", "TractKids", "TractSenios", "TractWhite", "TractBlack", "TractAsian", "TractNHOPI", "TractAIAN", "TractOMultir",
"TractHispanic","TractHUNV","TractSNAP")
library(dplyr)
group_by(my_data, POP2010) %>%
summarise(
count = n(),
mean = mean(Urban, na.rm = TRUE),
sd = sd(Urban, na.rm = TRUE)
)
install.packages("ggpubr")
#Used this as a test, got a plot with some data points.. Not sure how to get more on the Y axis? (Not numeric here perhaps?)
library("ggpubr")
ggboxplot(my_data, x = "Urban", y = "POP2010",
color = "POP2010", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "POP2010", xlab = "Urban")
# Box plot
boxplot(POP2010 ~ Urban, data = my_data,
xlab = "Urban", ylab = "POP2010",
frame = FALSE, col = c("#00AFBB", "#E7B800", "#FC4E07"))
#More Plots
library("gplots")
mean(POP2010 ~ Urban, data = my_data, frame = FALSE,
xlab = "Urban", ylab = "POP2010",
main="Mean Plot with 95% CI")
install.packages("ggpubr")
summary(res.aov)
chisq.test(food$Urban,y=food$LILATracts_1And10)
chisq.test(food$State, y=food$LILATracts_1And10)
chisq.test(food.access$Region, y=food.access$LILATracts_1And10)
View(my_data)
View(my_data)
View(food.access)
View(food.access)
chisq.test(food$Urban,y=food$LILATracts_1And10)
chisq.test(food$State, y=food$LILATracts_1And10)
summary(res.aov)
res.aov <- aov(LILATracts_1And10 ~ Urban, data = my_data)
summary(res.aov)
food$State<-as.factor(food$State)
View(food)
View(food.access)
View(food)
View(food)
View(res.aov)
View(USDA_Food_Access_Regions)
View(food.access)
View(food)
View(food.access)
View(glm_1sttry)
View(my_data)
View(food)
View(food.access)
View(USDA_Food_Access_Regions)
library(readr)
food <- read_csv("food.csv")
View(food)
View(food)
View(food)
food$Region<-as.factor(food$Region)
str(food)
food<-as.factor(food$State)
food<-as.factor(food$State)
str(food)
food$State<-as.factor(food$State)
str(food)
colnames(food)[7] <- desert
colnames(food)[7] <- c("desert")
colnames(food)[7] <- c("Desert")
summary(lm(Desert ~.-CensusTract-State,data = food))
factor(food$Desert) <- c("no","yes")
set_labels(food$Desert, labels = c('0' = "No", '1' ="Yes"))
labels(food, which= Desert, labels = c('0' = "No", '1' ="Yes"))
colnames(food)[7] <- c("Desert")
View(food.access)
install.packages("sjPlot")
set_lables(food, Desert, labels= c(0 ="No", 1="Yes"))
set_lables(food, Desert, labels <- c(0 ="No", 1="Yes"))
set_lables(food, Desert, labels <- c(0 =="No", 1=="Yes"))
ggboxplot(my_data, x = "Urban", y = "Desert",
color = "POP2010", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "POP2010", xlab = "Urban")
library("ggpubr")
ggboxplot(my_data, x = "Urban", y = "Desert",
color = "POP2010", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "POP2010", xlab = "Urban")
library("ggpubr")
ggboxplot(food, x = "Urban", y = "Desert",
color = "POP2010", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "POP2010", xlab = "Urban")
View(food)
View(food.access)
View(USDA_Food_Access_Regions)
library(readr)
Food_Access_State_And_Region <- read_csv("Food_Access_State_And_Region.csv")
View(Food_Access_State_And_Region)
library(readr)
food <- read_csv("food.csv")
View(food)
View(food)
View(Food_Access_State_And_Region)
View(food.access)
View(USDA_Food_Access_Regions)
View(food.access)
View(Food_Access_State_And_Region)
View(food)
dim(food)
str(food)
food$State<-as.factor(food$State)
dim(food)
str(food)
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[7] <- c("Desert")
olnames(food)[7] <- c("Desert")
str(food)
colnames(food)[8] <- c("Desert")
str(food)
library(readr)
food <- read_csv("food.csv")
View(food)
colnames(food)[8] <- c("Desert")
str(food)
food$Region <- as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
Region
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
food$Region
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Make region a factor
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
food$Region
str(food)
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Make region a factor
as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
food$Region
str(food)
food$State<-as.factor(food$State)
# changed y variable name
colnames(food)[8] <- c("Desert")
str(food)
# Make region a factor
food$Region <- as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
str(food)
as.factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
factor(food$Region, levels = c("Northeast", "Southeast", "Midwest", "Southwest", "West"), labels=c("NE", "SE", "MW", "SW", "W"))
str(food)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West")
str(food)
food$Region <- as.factor(food$Region)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West")
str(food)
food$Region <- as.factor(food$Region)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia")
str(food)
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia"), labesl= c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia") & labesl= c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia") & labesl <- c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia") & labels(food$Region) = c("NE", "SE", "MW", "SW","W","DC"))
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia")
labels(food$Region) = c("NE", "SE", "MW", "SW","W","DC")
levels(food$Region) <- c("Northeast","Southeast","Midwest","Southwest","West","District of Columbia")
names(food$Region) = c("NE", "SE", "MW", "SW","W","DC")
str(food)
levels(Region)
levels("Region")
levels(food$Region)
levels(food$Region)
food$Region <- as.factor(food$Region)
levels(food$Region)
levels(food$Region) <-c("NE", "SE","MW","SW","W","DC")
food$Region
View(food)
library(readr)
food <- read_csv("food.csv")
View(food)
class(food$Region)
class(food$Region)
food$Region <- as.factor(food$Region)
levels(food$Region)
colnames(food)[7] <- c("Desert")
# Make region a factor
class(food$Region)
food$Region <- as.factor(food$Region)
str(food)
View(food)
View(food)
library(readr)
food <- read_csv("food.csv")
View(food)
colnames(food)[8] <- c("Desert")
# Make Regions a factor
food$Region <- as.factor(food$Region)
str(food)
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(LILATracts_1And10~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
summary(glm_1sttry)
my_data <- food
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry)
food$Region <- as.factor(food$Region)
str(food)
### sampling process removed, new "food.csv" has been uploaded
### Model Building
summary(lm(Desert~.-CensusTract-State,data = food))
glm_1sttry<-glm(Desert~.-CensusTract-State,data = food,family = "binomial")
summary(glm_1sttry
summary(glm_1sttry)
summary(glm_1sttry)
chisq.test(food$Urban,y=food$Desert)
chisq.test(food$Region, y=food$Desert)
chisq.test(food$State, y=food$Desert)
food$State <- as.factor(food$State)
str(food)
food$Urban<- as.factor(food$Urban)
str(food)
levels(food$Urban)
cor.test(food$Urban, food$Desert)
cor.test(food$POP2010, food$Desert)
cor.test(food$POP2010, food$Desert)
cor.test(food$CensusTract, food$Desert)
cor.test(food$PovertyRate, food$Desert)
cor.test(food$TractSNAP, food$Desert)
cor.test(food$TractBlack, food$Desert)
install.packages("chloroplether")
install.packages("choroplethrMaps")
library(choroplethrMaps)
library("chloroplethr")
library(choroplethr)
library(choroplethrMaps)
?df_pop_state
??df_pop_state’
?df_pop_state’
??df_pop_state
library(ggplot2)
library(ggplot2movies)
library(ggpubr)
install.packages("mapproj")
library(maps)
library(maptools)
library(mapproj)
library(ggmap)
??ggmap
library(sp)
library(ggmap)
sp::webmap
data(df_pop_state)
state_choropleth(df_pop_state)
?df_state_demographics
??df_state_demographics
library(tigris)
library(acs)
library(stringr)
library(maptools)
ggtract<-fortify(tract, region = "GEOID")
library(broom)
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
install.packages('devtools')
library('devtools')
install.packages('choroplethrZip')
library('choroplethrZip')
install_github('arilamstein/choroplethrZip@v1.5.0')
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
install_github('arilamstein/choroplethrZip@v1.5.0')
library(choroplethrZip)
?county_choropleth_acs
??county_choropleth_acs
install.packages(‘choroplethr’)
install.packages("choroplethr")
update.packages("choroplethr")
> update.packages("choroplethr")
update.packages("choroplethr")
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
??api.key.install
install.packages("acs.fetch")
update.packages("acs.fetch")
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
library(acs)
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
library(rstudioapi)
??api.key.install
api.key.install(c2f6912e10d0446fa56f2ea12e9fdc8c6d187327, file ="census.key")
> api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
census.key <- api.key.install("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
census.key
acs.fetch(endyear=2010, geography=food$CensusTract)
?get_state_demographics
??get_state_demographics
ggtract <- fortify(CensusTract, region = "GEOID")
ggtract <- fortify(food$CensusTract, region = "GEOID")
ggtract <- fortify(food, region = "CensusTract")
remove(ggtract)
library(tigris)
library(acs)
library(stringr)
library(tidyverse)
library(ggmap)
library(DT)
library(knitr)
geo <- geocode(location = food$CensusTract, output="GEOID", source="census")
geo <- geocode(location = food$CensusTract, output="latlon", source="census")
geo <- geocode(location = food$CensusTract, output="GEOID", source="google")
geo <- geocode(location = food$CensusTract, output="latlon", source="google")
?register_google
register_google(census.key)
register_google(c2f6912e10d0446fa56f2ea12e9fdc8c6d187327)
register_google(key=c2f6912e10d0446fa56f2ea12e9fdc8c6d187327)
register_google(key=AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA)
register_google(key = AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA)
key = AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA
> register_google(key = "AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA")
register_google(key = "AIzaSyAtaAPtU3aoUq8AsaxE1qkaZXwIs6tpZhA")
geo <- geocode(location = food$CensusTract, output="latlon", source="google")
install.packages("devtools")
devtools::install_github("hrecht/censusapi")
library("censusapi")
install.packages("devtools")
source(c2f6912e10d0446fa56f2ea12e9fdc8c6d187327)
source("c2f6912e10d0446fa56f2ea12e9fdc8c6d187327")
food.deserts <- ggplot() + geom_polygon(data=food y, aes(x=food$CensusTract, y=food$Desert)
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert)
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert)
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert)
geom_polygon(data=food, aes
food.deserts <- ggplot() + geom_polygon(data=food, aes(x=food$CensusTract, y=food$Desert))
food.deserts
View(food.deserts)
View(food.deserts)
View(food.deserts)
remvoe(food.deserts)
remove(food.deserts)
remove(census.keyu)
remove(census.key)
geo <- geocode(location = food$State, output="latlon", source="google")
drat::addRepo('bhaskarvk')
install.packages('drat')
install.packages('usgazetteer')
update.packages('usgazetteer')
library(censusapi)
library(censusapi)
apis <- listCensusApis()
apis <- listCensusApis()
View(apis)
remove(apis)
View(glm_1sttry)
cor.test(food$TractSNAP, food$Desert)
